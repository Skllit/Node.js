Below is a complete new application that demonstrates a many‑to‑many relationship between **Users** and **Groups** in a real‑time chat groups context. In this project, users can join groups and send messages to those groups. When a new message is sent (via REST or Socket.io), all connected clients will receive the update in real time.

This sample project uses Node.js, Express, Mongoose, and Socket.io and is structured with a REST API for creating users and groups, joining groups, and posting messages, plus a simple HTML client for real‑time interaction.

---

## 1. Project Setup

### A. Create a New Project Directory

Open your terminal and create the directory:

```bash
mkdir realtime-chatgroups-app
cd realtime-chatgroups-app
```

### B. Initialize npm

Create a default `package.json`:

```bash
npm init -y
```

### C. Install Dependencies

Install Express, Mongoose, and Socket.io for the application and Nodemon for easier development:

```bash
npm install express mongoose socket.io
npm install --save-dev nodemon
```

### D. Directory Structure

Create the following structure:

```
realtime-chatgroups-app/
├── models/
│   ├── User.js
│   ├── Group.js
│   └── Message.js
├── public/
│   └── index.html
├── server.js
└── package.json
```

---

## 2. Code Files

Below are the complete code listings for each file.

---

### A. package.json

Update your `package.json` with development scripts if desired:

```json
{
  "name": "realtime-chatgroups-app",
  "version": "1.0.0",
  "description": "A real-time chat groups app with many-to-many relationships using Express, MongoDB, and Socket.io",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.2.2",
    "socket.io": "^4.6.1"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  },
  "author": "",
  "license": "ISC"
}
```

---

### B. models/User.js

Defines the **User** model. Each user has a name, email, and an array of groups they belong to.

```js
// models/User.js
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const userSchema = new Schema(
  {
    name: { type: String, required: [true, "User name required"] },
    email: { type: String, required: [true, "User email required"], unique: true },
    groups: [{ type: Schema.Types.ObjectId, ref: "Group" }]
  },
  { timestamps: true }
);

module.exports = mongoose.model("User", userSchema);
```

---

### C. models/Group.js

Defines the **Group** model. Each group has a name, description, and an array of member user IDs.

```js
// models/Group.js
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const groupSchema = new Schema(
  {
    name: { type: String, required: [true, "Group name required"] },
    description: { type: String },
    members: [{ type: Schema.Types.ObjectId, ref: "User" }]
  },
  { timestamps: true }
);

module.exports = mongoose.model("Group", groupSchema);
```

---

### D. models/Message.js

Defines the **Message** model. A message belongs to one group and has a sender (a user) and the content.

```js
// models/Message.js
const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const messageSchema = new Schema(
  {
    group: { type: Schema.Types.ObjectId, ref: "Group", required: true },
    sender: { type: Schema.Types.ObjectId, ref: "User", required: true },
    content: { type: String, required: [true, "Message content required"] }
  },
  { timestamps: true }
);

module.exports = mongoose.model("Message", messageSchema);
```

---

### E. server.js

The main application file. It sets up Express routes to create users and groups, join groups, post messages, and retrieve data. It also integrates Socket.io for real‑time messaging updates.

```js
// server.js
const express = require('express');
const mongoose = require('mongoose');
const path = require('path');

const User = require('./models/User');
const Group = require('./models/Group');
const Message = require('./models/Message');

const app = express();

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Serve static files from "public"
app.use(express.static(path.join(__dirname, 'public')));

// ----- REST API Endpoints ----- //

// Create a new user
app.post('/users', async (req, res) => {
  try {
    const user = await User.create(req.body);
    res.status(201).json(user);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get all users
app.get('/users', async (req, res) => {
  try {
    const users = await User.find({}).populate('groups', 'name');
    res.status(200).json(users);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Create a new group
app.post('/groups', async (req, res) => {
  try {
    const group = await Group.create(req.body);
    res.status(201).json(group);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get all groups
app.get('/groups', async (req, res) => {
  try {
    const groups = await Group.find({}).populate('members', 'name email');
    res.status(200).json(groups);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Join a group (add user to group and vice versa)
app.post('/groups/:groupId/join', async (req, res) => {
  try {
    const { groupId } = req.params;
    const { userId } = req.body;

    const group = await Group.findById(groupId);
    const user = await User.findById(userId);

    if (!group || !user) {
      return res.status(404).json({ message: 'Group or User not found.' });
    }

    // Avoid duplicate membership
    if (!group.members.includes(userId)) {
      group.members.push(userId);
      await group.save();
    }

    if (!user.groups.includes(groupId)) {
      user.groups.push(groupId);
      await user.save();
    }

    res.status(200).json({ message: "User joined the group successfully." });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get messages for a specific group
app.get('/groups/:groupId/messages', async (req, res) => {
  try {
    const messages = await Message.find({ group: req.params.groupId })
      .populate('sender', 'name email')
      .sort({ createdAt: 1 });
    res.status(200).json(messages);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Post a message to a group (REST endpoint)
app.post('/groups/:groupId/messages', async (req, res) => {
  try {
    const { groupId } = req.params;
    const { sender, content } = req.body;

    // Verify user and group exist
    const group = await Group.findById(groupId);
    const user = await User.findById(sender);
    if (!group || !user) {
      return res.status(404).json({ message: 'Group or User not found.' });
    }

    const message = await Message.create({ group: groupId, sender, content });
    // Emit realtime event after saving message
    io.emit('newMessage', message);
    res.status(201).json(message);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// ----- MongoDB Connection & Server Start ----- //

mongoose.set("strictQuery", false);
mongoose.connect('mongodb://127.0.0.1:27017/realtime-chatgroups', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((error) => {
    console.error('MongoDB connection error:', error.message);
  });

const server = app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

// ----- Socket.io Setup ----- //
const io = require('socket.io')(server);

io.on('connection', (socket) => {
  console.log('New client connected:', socket.id);

  // Listen for new messages sent via realtime channel
  socket.on('sendMessage', async (data) => {
    try {
      // Expected payload: { groupId, sender, content }
      const { groupId, sender, content } = data;
      const group = await Group.findById(groupId);
      const user = await User.findById(sender);
      if (!group || !user) return;

      const message = await Message.create({ group: groupId, sender, content });
      // Broadcast the message to all clients
      io.emit('newMessage', message);
    } catch (error) {
      console.error('Error sending message:', error.message);
    }
  });

  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});
```

---

### F. public/index.html

A simple client that allows you to select a group, choose a sender (user), and send a message in real time. The page displays messages for the selected group.

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Real-Time Chat Groups</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    #chat { border: 1px solid #ccc; padding: 10px; width: 600px; margin-bottom: 20px; }
    #messages { height: 300px; overflow-y: scroll; border: 1px solid #ddd; padding: 10px; }
    form { margin-top: 10px; }
    select, input[type="text"] { padding: 5px; margin-right: 5px; }
  </style>
</head>
<body>
  <h1>Real-Time Chat Groups</h1>
  
  <div>
    <label for="groupSelect">Select Group:</label>
    <select id="groupSelect"></select>
  </div>

  <div>
    <label for="userSelect">Select User:</label>
    <select id="userSelect"></select>
  </div>

  <div id="chat">
    <h3>Messages</h3>
    <div id="messages"></div>
    <form id="messageForm">
      <input type="text" id="messageContent" placeholder="Type your message" required>
      <button type="submit">Send</button>
    </form>
  </div>

  <!-- Socket.io Client Library -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    // Elements
    const groupSelect = document.getElementById('groupSelect');
    const userSelect = document.getElementById('userSelect');
    const messagesDiv = document.getElementById('messages');
    const messageForm = document.getElementById('messageForm');
    const messageContent = document.getElementById('messageContent');

    // Load groups from server
    async function loadGroups() {
      const res = await fetch('/groups');
      const groups = await res.json();
      groupSelect.innerHTML = '';
      groups.forEach(group => {
        const option = document.createElement('option');
        option.value = group._id;
        option.textContent = group.name;
        groupSelect.appendChild(option);
      });
      // Load messages for the first group by default
      if (groups.length > 0) {
        loadMessages(groups[0]._id);
      }
    }

    // Load users from server
    async function loadUsers() {
      const res = await fetch('/users');
      const users = await res.json();
      userSelect.innerHTML = '';
      users.forEach(user => {
        const option = document.createElement('option');
        option.value = user._id;
        option.textContent = user.name + ' (' + user.email + ')';
        userSelect.appendChild(option);
      });
    }

    // Load messages for a selected group
    async function loadMessages(groupId) {
      const res = await fetch(`/groups/${groupId}/messages`);
      const messages = await res.json();
      messagesDiv.innerHTML = '';
      messages.forEach(msg => {
        displayMessage(msg);
      });
    }

    // Display message in messages div
    function displayMessage(msg) {
      const div = document.createElement('div');
      div.innerHTML = `<strong>${msg.sender.name || msg.sender}:</strong> ${msg.content} <em>(${new Date(msg.createdAt).toLocaleTimeString()})</em>`;
      messagesDiv.appendChild(div);
      messagesDiv.scrollTop = messagesDiv.scrollHeight;
    }

    // Listen for realtime new messages
    socket.on('newMessage', (msg) => {
      // If the message belongs to the currently selected group, display it
      if (msg.group === groupSelect.value) {
        // Since sender might be an ObjectId if not populated, you might want to handle that case.
        displayMessage(msg);
      }
    });

    // Handle message form submission
    messageForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const data = {
        groupId: groupSelect.value,
        sender: userSelect.value,
        content: messageContent.value
      };
      socket.emit('sendMessage', data);
      messageContent.value = '';
    });

    // Change event for group select to reload messages
    groupSelect.addEventListener('change', () => {
      loadMessages(groupSelect.value);
    });

    // Initial load of groups and users
    loadGroups();
    loadUsers();
  </script>
</body>
</html>
```

---

## 3. Dummy Data for Testing in Postman

Here are several endpoints along with example JSON bodies that you can use to test the API with Postman:

### A. Create Users

**Endpoint:**  
```
POST http://localhost:3000/users
```

**Example Request Bodies:**

1. Create Alice  
```json
{
  "name": "Alice",
  "email": "alice@example.com"
}
```

2. Create Bob  
```json
{
  "name": "Bob",
  "email": "bob@example.com"
}
```

3. Create Charlie  
```json
{
  "name": "Charlie",
  "email": "charlie@example.com"
}
```

### B. Create Groups

**Endpoint:**  
```
POST http://localhost:3000/groups
```

**Example Request Bodies:**

1. Create “Music Lovers” Group  
```json
{
  "name": "Music Lovers",
  "description": "A group for people who love music."
}
```

2. Create “Book Club” Group  
```json
{
  "name": "Book Club",
  "description": "Discussing great books together."
}
```

3. Create “Travel Enthusiasts” Group  
```json
{
  "name": "Travel Enthusiasts",
  "description": "Sharing travel tips and stories."
}
```

### C. Join a Group

**Endpoint:**  
```
POST http://localhost:3000/groups/{groupId}/join
```
Replace `{groupId}` with the actual group ID from the previous response.

**Example Request Body:**

```json
{
  "userId": "PUT_A_VALID_USER_ID_HERE"
}
```

Test this for different combinations (e.g., add Alice and Bob to “Music Lovers”, add Charlie to “Book Club”, etc.).

### D. Post a Message (REST)

**Endpoint:**  
```
POST http://localhost:3000/groups/{groupId}/messages
```

Replace `{groupId}` with the actual group ID.

**Example Request Body:**

```json
{
  "sender": "PUT_A_VALID_USER_ID_HERE",
  "content": "Hello everyone! Excited to join this group."
}
```

Use several messages from different users for various groups.

### E. Retrieve Group Messages

**Endpoint:**  
```
GET http://localhost:3000/groups/{groupId}/messages
```

Replace `{groupId}` with the group’s ID.

---

## 4. Running the Application

1. **Ensure MongoDB is Running:**  
   Make sure MongoDB is running on your machine (for example, run `mongod` or start the MongoDB service).

2. **Start the Server:**  
   In your project root, run:

   ```bash
   npm run dev
   ```
   or
   ```bash
   npm start
   ```

3. **Access the Client:**  
   Open your browser and go to [http://localhost:3000](http://localhost:3000). The page lets you select a group and a user and send messages in real time.

4. **Test via Postman:**  
   Use the endpoints and dummy data provided above to create users, groups, join groups, and post messages.

---

## 5. Summary

This complete application demonstrates a many‑to‑many relationship between **Users** and **Groups**. Key features include:

- **User and Group Models:** with many‑to‑many relationships (users may belong to many groups and groups contain many users).
- **Message Model:** for group-based messages.
- **REST API Endpoints:** to create users/groups, join groups, post and retrieve messages.
- **Real‑Time Communication:** via Socket.io so that new messages are broadcasted immediately to all connected clients.
- **A Simple Front-End Client:** for real‑time interaction.

Feel free to extend or modify this project to suit your needs. Enjoy building your real‑time many‑to‑many chat groups application!