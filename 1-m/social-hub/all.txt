Below is a comprehensive, real‑time social hub application built with Node.js, Express, MongoDB (via Mongoose), and Socket.io. This project demonstrates several relationships:

- **One-to-Many:**  
  • A User creates many Posts  
  • A Post gets many Comments

- **Many-to-Many:**  
  • Users can join multiple Groups and each Group can have many Users  
  • Users can “like” many Posts and each Post can be liked by many Users

- **(Optional) One-to-One:**  
  • Each User holds a Profile embedded in the User document (for simplicity)

In addition to REST endpoints for creating and fetching data, new Posts, Comments, and Group join events are broadcast in real time via Socket.io. Robust error handling, validations, and edge‑case checks have been added so that there is little room for surprises.

Below you’ll find complete instructions, a full package (with file structure and code for every file), and a set of dummy data you can use for testing in Postman.

---

## 1. Project Overview and Setup

### A. Create a New Project Directory

Open your terminal and create the project folder:

```bash
mkdir social-hub
cd social-hub
```

### B. Initialize NPM

Create a package.json file:

```bash
npm init -y
```

### C. Install Dependencies

Install the required dependencies:

```bash
npm install express mongoose socket.io
npm install --save-dev nodemon
```

### D. File/Folder Structure

Create the following structure:

```
social-hub/
├── models/
│   ├── User.js
│   ├── Post.js
│   ├── Comment.js
│   └── Group.js
├── public/
│   └── index.html
├── server.js
└── package.json
```

---

## 2. Code Files

Below are the contents for each file.

---

### A. package.json

Update your `package.json` to include start scripts (adjust versions as necessary):

```json
{
  "name": "social-hub",
  "version": "1.0.0",
  "description": "A real-time social hub that demonstrates one-to-many, many-to-many, and one-to-one relationships using Node.js, MongoDB, and Socket.io.",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "mongoose": "^7.2.2",
    "socket.io": "^4.6.1"
  },
  "devDependencies": {
    "nodemon": "^2.0.22"
  },
  "author": "",
  "license": "ISC"
}
```

---

### B. models/User.js

This model defines a User with an embedded profile (one-to-one), and arrays to hold groups joined and posts liked.

```js
// models/User.js

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const profileSchema = new Schema({
  bio: { type: String, default: "" },
  avatar: { type: String, default: "" }
}, { _id: false });

const userSchema = new Schema(
  {
    username: {
      type: String,
      required: [true, "Username is required"],
      unique: true
    },
    email: {
      type: String,
      required: [true, "Email is required"],
      unique: true
    },
    profile: profileSchema,
    // Many-to-many: groups user joined
    groups: [{ type: Schema.Types.ObjectId, ref: "Group" }],
    // Many-to-many: posts user liked
    likedPosts: [{ type: Schema.Types.ObjectId, ref: "Post" }]
  },
  {
    timestamps: true
  }
);

module.exports = mongoose.model('User', userSchema);
```

---

### C. models/Post.js

A Post is created by a User, may get many Comments, and maintains a list of users who liked it (many-to-many).

```js
// models/Post.js

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const postSchema = new Schema(
  {
    content: {
      type: String,
      required: [true, "Post content is required"]
    },
    // One-to-many: author field (one user creates many posts)
    author: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: true
    },
    // Optional: if a post is posted in a group
    group: {
      type: Schema.Types.ObjectId,
      ref: "Group",
      default: null
    },
    // Many-to-many: users who liked this post
    likedBy: [{ type: Schema.Types.ObjectId, ref: "User" }]
  },
  {
    timestamps: true
  }
);

module.exports = mongoose.model('Post', postSchema);
```

---

### D. models/Comment.js

A Comment belongs to a Post and is made by a User.

```js
// models/Comment.js

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const commentSchema = new Schema(
  {
    text: {
      type: String,
      required: [true, "Comment text is required"]
    },
    // One-to-many: a post has many comments
    post: {
      type: Schema.Types.ObjectId,
      ref: "Post",
      required: true
    },
    // Comment author
    author: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: true
    }
  },
  {
    timestamps: true
  }
);

module.exports = mongoose.model('Comment', commentSchema);
```

---

### E. models/Group.js

A Group contains many Users (and a User can be in many Groups – many-to-many) and can have many posts posted in the group.

```js
// models/Group.js

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const groupSchema = new Schema(
  {
    name: {
      type: String,
      required: [true, "Group name is required"]
    },
    description: {
      type: String,
      default: ""
    },
    // Many-to-many: list of members
    members: [{ type: Schema.Types.ObjectId, ref: "User" }]
  },
  {
    timestamps: true
  }
);

module.exports = mongoose.model('Group', groupSchema);
```

---

### F. server.js

This is the main application file. It sets up the Express server, connects to MongoDB, configures all REST endpoints, and integrates Socket.io for real‑time updates. Edge cases and error handling are provided throughout.

```js
// server.js

const express = require('express');
const mongoose = require('mongoose');
const path = require('path');

// Import models
const User = require('./models/User');
const Post = require('./models/Post');
const Comment = require('./models/Comment');
const Group = require('./models/Group');

const app = express();

// Middleware to parse JSON and URL-encoded bodies
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Serve static client files from the "public" folder
app.use(express.static(path.join(__dirname, 'public')));

// *******************************
// REST ENDPOINTS
// *******************************

// ---------- USERS ---------- //

// Create a new user
app.post('/users', async (req, res) => {
  try {
    const user = await User.create(req.body);
    res.status(201).json(user);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get all users
app.get('/users', async (req, res) => {
  try {
    const users = await User.find({}).populate('groups').populate('likedPosts');
    res.status(200).json(users);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// ---------- GROUPS ---------- //

// Create a new group
app.post('/groups', async (req, res) => {
  try {
    const group = await Group.create(req.body);
    res.status(201).json(group);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// User joins a group (many-to-many update both sides)
app.post('/groups/:groupId/join', async (req, res) => {
  try {
    const { userId } = req.body;
    const group = await Group.findById(req.params.groupId);
    const user = await User.findById(userId);
    if (!group || !user) {
      return res.status(404).json({ message: 'Group or User not found' });
    }
    // Add user to group if not already there
    if (!group.members.includes(userId)) {
      group.members.push(userId);
      await group.save();
    }
    // Add group to user's groups if not already present
    if (!user.groups.includes(group._id)) {
      user.groups.push(group._id);
      await user.save();
    }
    res.status(200).json({ message: 'User joined the group', group, user });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get all groups
app.get('/groups', async (req, res) => {
  try {
    const groups = await Group.find({}).populate('members');
    res.status(200).json(groups);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// ---------- POSTS ---------- //

// Create a new post; optional: assign a group if provided
app.post('/posts', async (req, res) => {
  try {
    const { content, author, group } = req.body;
    // Validate author exists
    const user = await User.findById(author);
    if (!user) {
      return res.status(404).json({ message: 'Author not found' });
    }
    // If group is provided, validate existence
    if (group) {
      const grp = await Group.findById(group);
      if (!grp) {
        return res.status(404).json({ message: 'Group not found' });
      }
    }
    const post = await Post.create({ content, author, group });
    res.status(201).json(post);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// User likes a post (many-to-many: update both Post and User)
app.post('/posts/:postId/like', async (req, res) => {
  try {
    const { userId } = req.body;
    const post = await Post.findById(req.params.postId);
    const user = await User.findById(userId);
    if (!post || !user) {
      return res.status(404).json({ message: 'Post or User not found' });
    }
    // Check if user already liked the post
    if (!post.likedBy.includes(userId)) {
      post.likedBy.push(userId);
      await post.save();
    }
    if (!user.likedPosts.includes(post._id)) {
      user.likedPosts.push(post._id);
      await user.save();
    }
    res.status(200).json({ message: 'Post liked', post, user });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get all posts (optionally populate author and likes)
app.get('/posts', async (req, res) => {
  try {
    const posts = await Post.find({})
      .populate('author', 'username email')
      .populate('likedBy', 'username')
      .populate('group', 'name');
    res.status(200).json(posts);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// ---------- COMMENTS ---------- //

// Create a comment for a post
app.post('/posts/:postId/comments', async (req, res) => {
  try {
    const { text, author } = req.body;
    const post = await Post.findById(req.params.postId);
    if (!post) {
      return res.status(404).json({ message: 'Post not found' });
    }
    // Validate user exists
    const user = await User.findById(author);
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    const comment = await Comment.create({ text, post: post._id, author });
    res.status(201).json(comment);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Get all comments for a post
app.get('/posts/:postId/comments', async (req, res) => {
  try {
    const comments = await Comment.find({ post: req.params.postId })
      .populate('author', 'username')
      .sort({ createdAt: 1 });
    res.status(200).json(comments);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// *******************************
// REAL-TIME SETUP WITH SOCKET.IO
// *******************************

// Connect to MongoDB
mongoose.set("strictQuery", false);
mongoose.connect('mongodb://127.0.0.1:27017/socialhub', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
  .then(() => console.log('Connected to MongoDB'))
  .catch((error) => console.error('MongoDB connection error:', error.message));

// Start the server
const server = app.listen(3000, () => {
  console.log('Social Hub server is running on port 3000');
});

// Set up Socket.io for real-time events
const io = require('socket.io')(server, {
  cors: { origin: "*" }
});

io.on('connection', (socket) => {
  console.log('New client connected:', socket.id);

  // Real-time: broadcast new post
  socket.on('newPost', async (data) => {
    try {
      const { content, author, group } = data;
      // Validate author (and group if provided) as in REST endpoint
      const user = await User.findById(author);
      if (!user) return;
      if (group) {
        const grp = await Group.findById(group);
        if (!grp) return;
      }
      const post = await Post.create({ content, author, group });
      io.emit('postCreated', post);
    } catch (error) {
      console.error('Error creating post in real-time:', error.message);
    }
  });

  // Real-time: broadcast new comment on a post
  socket.on('newComment', async (data) => {
    try {
      const { text, postId, author } = data;
      const post = await Post.findById(postId);
      const user = await User.findById(author);
      if (!post || !user) return;
      const comment = await Comment.create({ text, post: postId, author });
      io.emit('commentAdded', comment);
    } catch (error) {
      console.error('Error adding comment in real-time:', error.message);
    }
  });

  // Real-time: a user joining a group
  socket.on('joinGroup', async (data) => {
    try {
      const { groupId, userId } = data;
      const group = await Group.findById(groupId);
      const user = await User.findById(userId);
      if (!group || !user) return;
      if (!group.members.includes(userId)) {
        group.members.push(userId);
        await group.save();
      }
      if (!user.groups.includes(group._id)) {
        user.groups.push(group._id);
        await user.save();
      }
      io.emit('groupUpdated', group);
    } catch (error) {
      console.error('Error joining group in real-time:', error.message);
    }
  });

  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});
```

---

### G. public/index.html

A simple client page to demonstrate real‑time events. In practice, you’d likely have a full‑featured front end; this sample shows basic functionality with real‑time updates for new posts and comments.

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Social Hub Real-Time</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 20px; }
    .post { border: 1px solid #ccc; padding: 10px; margin-bottom: 20px; }
    .comment { margin-left: 20px; font-size: 0.9em; }
  </style>
</head>
<body>
  <h1>Social Hub Real-Time Feed</h1>
  
  <section>
    <h2>Create New Post</h2>
    <form id="postForm">
      <input type="text" id="postContent" placeholder="What's on your mind?" required>
      <br>
      <input type="text" id="postAuthor" placeholder="Your User ID" required>
      <br>
      <input type="text" id="postGroup" placeholder="Group ID (optional)">
      <br>
      <button type="submit">Post</button>
    </form>
  </section>
  
  <hr>
  
  <section>
    <h2>Feed</h2>
    <div id="postsContainer"></div>
  </section>
  
  <!-- Socket.io client library -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    // Listen for new posts via real-time event
    socket.on('postCreated', (post) => {
      addPostToDOM(post);
    });

    // Listen for new comments via real-time event
    socket.on('commentAdded', (comment) => {
      const postElem = document.getElementById(`post-${comment.post}`);
      if (postElem) {
        const commentsDiv = postElem.querySelector('.comments');
        const commentElem = document.createElement('div');
        commentElem.classList.add('comment');
        commentElem.innerText = `Comment by ${comment.author}: ${comment.text} (${new Date(comment.createdAt).toLocaleTimeString()})`;
        commentsDiv.appendChild(commentElem);
      }
    });

    // Post form submission
    document.getElementById('postForm').addEventListener('submit', (e) => {
      e.preventDefault();
      const content = document.getElementById('postContent').value;
      const author = document.getElementById('postAuthor').value;
      const group = document.getElementById('postGroup').value || null;
      socket.emit('newPost', { content, author, group });
      e.target.reset();
    });

    // Utility: add a new post element to the DOM
    function addPostToDOM(post) {
      const container = document.getElementById('postsContainer');
      const postDiv = document.createElement('div');
      postDiv.classList.add('post');
      postDiv.id = `post-${post._id}`;
      postDiv.innerHTML = `
        <p><strong>Post:</strong> ${post.content}</p>
        <p><em>By: ${post.author} | ${new Date(post.createdAt).toLocaleString()}</em></p>
        <div class="comments">
          <h4>Comments:</h4>
        </div>
        <form class="commentForm">
          <input type="text" name="commentText" placeholder="Add comment" required>
          <input type="text" name="commentAuthor" placeholder="Your User ID" required>
          <button type="submit">Submit Comment</button>
        </form>
      `;
      container.prepend(postDiv);

      // Comment form listener
      postDiv.querySelector('.commentForm').addEventListener('submit', function (e) {
        e.preventDefault();
        const commentText = this.commentText.value;
        const commentAuthor = this.commentAuthor.value;
        socket.emit('newComment', { text: commentText, postId: post._id, author: commentAuthor });
        this.reset();
      });
    }
  </script>
</body>
</html>
```

---

## 3. Dummy Data for Testing with Postman

Here are several sample requests to test various endpoints:

### **1. Create Users**

**Endpoint:**  
```
POST http://localhost:3000/users
```

**Request Body (JSON):**

_User A:_
```json
{
  "username": "alice",
  "email": "alice@example.com",
  "profile": { "bio": "Loves traveling", "avatar": "http://example.com/avatar/alice.jpg" }
}
```

_User B:_
```json
{
  "username": "bob",
  "email": "bob@example.com",
  "profile": { "bio": "Tech enthusiast", "avatar": "http://example.com/avatar/bob.jpg" }
}
```

_User C:_
```json
{
  "username": "charlie",
  "email": "charlie@example.com",
  "profile": { "bio": "Foodie & photographer", "avatar": "http://example.com/avatar/charlie.jpg" }
}
```

### **2. Create Groups**

**Endpoint:**  
```
POST http://localhost:3000/groups
```

**Request Body (JSON):**

_Group 1:_
```json
{
  "name": "Travel Lovers",
  "description": "A group for people who love traveling."
}
```

_Group 2:_
```json
{
  "name": "Tech Geeks",
  "description": "Discuss the latest in technology."
}
```

### **3. User Joins a Group**

**Endpoint:**  
```
POST http://localhost:3000/groups/{groupId}/join
```

Replace `{groupId}` with the actual group ID from previous request.

**Request Body (JSON):** (Assuming Alice’s userId is known)
```json
{
  "userId": "ALICE_USER_ID"
}
```

Repeat for Bob and Charlie as needed.

### **4. Create a Post**

**Endpoint:**  
```
POST http://localhost:3000/posts
```

**Request Body (JSON):**

_Post by Alice:_
```json
{
  "content": "Just got back from an amazing trip!",
  "author": "ALICE_USER_ID",
  "group": "TRAVEL_GROUP_ID"    // Optional – include a group if desired
}
```

_Post by Bob (without a group):_
```json
{
  "content": "Loving the new tech gadgets unveiled today.",
  "author": "BOB_USER_ID"
}
```

### **5. Like a Post**

**Endpoint:**  
```
POST http://localhost:3000/posts/{postId}/like
```

Replace `{postId}` with a valid post ID.

**Request Body (JSON):**

```json
{
  "userId": "CHARLIE_USER_ID"
}
```

### **6. Create a Comment on a Post**

**Endpoint:**  
```
POST http://localhost:3000/posts/{postId}/comments
```

Replace `{postId}` with the actual post ID.

**Request Body (JSON):**

```json
{
  "text": "That sounds incredible!",
  "author": "BOB_USER_ID"
}
```

### **7. Retrieve Data**

- **Get all users:**  
  `GET http://localhost:3000/users`
  
- **Get all groups:**  
  `GET http://localhost:3000/groups`
  
- **Get all posts:**  
  `GET http://localhost:3000/posts`
  
- **Get comments for a post:**  
  `GET http://localhost:3000/posts/{postId}/comments`

---

## 4. Running the Application

1. **Ensure MongoDB is Running**  
   Start MongoDB on your machine (e.g., via `mongod` or your MongoDB service).

2. **Start the Application**  
   From the project folder, run:
   ```bash
   npm run dev
   ```
   or
   ```bash
   npm start
   ```

3. **Test in Postman**  
   Use the provided dummy data to test all endpoints. You can also open [http://localhost:3000/](http://localhost:3000/) in your browser to see a basic real‑time feed demo where new posts and comments will appear instantly.

---

## 5. Summary

This “Social Hub” application demonstrates:  
- **One-to-One:** Embedded profile in User  
- **One-to-Many:** A User’s Posts and a Post’s Comments  
- **Many-to-Many:** Users joining Groups and liking Posts  
- **Real-Time Features:** New posts, comments, and group join events are broadcast via Socket.io.  
- **Robust Edge Case Handling:** Errors are managed and the application validates existence of referenced entities before performing operations.

Enjoy this full‑featured, real‑time social hub application with all relationships built in and feel free to extend it further as needed!